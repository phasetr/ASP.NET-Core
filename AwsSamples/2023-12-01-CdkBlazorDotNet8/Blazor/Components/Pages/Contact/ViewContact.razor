@using Microsoft.EntityFrameworkCore
@using Common.Entities
@using Blazor.Data
@using Common.Constants
@using Common.Helper
@rendermode InteractiveServer
@attribute [Route(AppPath.ContactView + "/{ContactId:int}")]
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IPageHelper PageHelper
@inject EditSuccess EditSuccessState

@if (_notFound && !_loading)
{
  <div class="alert alert-warning">A contact with that id doesn't exist.</div>
}
else
{
  @if (Contact is null || _loading)
  {
    <div class="alert alert-info">Loading...</div>
  }
  else
  {
    <h1>@Contact.LastName, @Contact.FirstName</h1>
    <br/>
    @if (EditSuccess)
    {
      <div class="alert alert-success">Successfully updated the contact.</div>
    }

    <hr/>
    <h2>📞 Phone</h2>
    <br/>
    <h3>@Contact.Phone</h3>
    <br/>
    <h2>🏠 Address</h2>
    <br/>
    <h3>@Contact.Street</h3>
    <h3>@Contact.City, @Contact.State @Contact.ZipCode</h3>
    <br/>
    <a class="btn btn-primary" title="Go Back" href="@AppPath.ContactRoot/@PageHelper.Page">
      🔙 Back to Grid
    </a>
    @if (!_deleted)
    {
      <a class="btn btn-primary" href="@AppPath.ContactEdit/@Contact.Id" title="Edit">Edit</a>
      <span>&nbsp;</span>
      @if (!_showConfirmation)
      {
        <button class="btn btn-danger" @onclick="@(() => { _showConfirmation = true; EditSuccess = false; })">Delete</button>
      }
      else
      {
        <br/>
        <br/>
        <DeletePrompt Confirmation="@(async result => await ConfirmAsync(result))"/>
      }
    }
    else
    {
      <div class="btn btn-danger">🚫 This item has been deleted.</div>
    }
  }
}

@code {

  // Tracking of asynchronous calls.
  private bool _loading;

  // Id from route of contact.
  [Parameter] public int ContactId { get; set; }

  // Navigation check.
  private int _lastContactId;

  // True with redirect from successful edit.
  [Parameter] public bool EditSuccess { get; set; }

  // Contact entity.
  private Contact? Contact { get; set; }

  // Set to true when not found.
  private bool _notFound;

  // Set to true when delete is requested.
  private bool _showConfirmation;

  // Set to true when delete is successful.
  private bool _deleted;

  // Navigated
  protected override async Task OnParametersSetAsync()
  {
    if (_lastContactId != ContactId)
    {
      EditSuccess = EditSuccessState.Success;
      EditSuccessState.Success = false;
      _lastContactId = ContactId;
      await LoadContactAsync();
    }

    await base.OnParametersSetAsync();
  }

  // Confirm deletion.
  // result is True when user confirmed.
  private async Task ConfirmAsync(bool result)
  {
    if (result)
    {
      await DeleteAsync();
    }
    else
    {
      _showConfirmation = false;
      EditSuccess = false;
    }
  }

  // Loads the contact.
  private async Task LoadContactAsync()
  {
    if (_loading)
    {
      return; // avoid concurrent requests.
    }

    _notFound = false;
    Contact = null;

    _loading = true;

    await using var context = await DbFactory.CreateDbContextAsync();

    if (context.Contacts is not null)
    {
      Contact = await context.Contacts
        .AsNoTracking()
        .SingleOrDefaultAsync(
          c => c.Id == ContactId);

      if (Contact is null)
      {
        _notFound = true;
      }
    }

    _loading = false;
  }

  // Deletes the contact.
  private async Task DeleteAsync()
  {
    if (_loading)
    {
      // Avoid concurrent requests.
      return;
    }

    _loading = true;
    await using var context = await DbFactory.CreateDbContextAsync();

    if (context?.Contacts is not null)
    {
      var contact = await context.Contacts
        .SingleOrDefaultAsync(c => c.Id == ContactId);

      if (contact is not null)
      {
        context.Contacts?.Remove(contact);
        await context.SaveChangesAsync();
        _loading = false;
        _deleted = true;
      }
      else
      {
        _loading = false;
        // Show not found.
        await LoadContactAsync();
      }
    }
    else
    {
      _loading = false;
      // Show not found.
      await LoadContactAsync();
    }
  }

}
