@page "/book/detail/{id}"
@using System.Net
@using Common.Dtos
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Book Details</h3>

@if (_errors)
{
  <p>There was an error loading the book:</p>
  <ul>
    @foreach (var error in _errorList)
    {
      <li>@error</li>
    }
  </ul>
}

@if (_bookUpdate == null)
{
  <p>No item!</p>
}
else
{
  <EditForm Model="@_bookUpdate" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
      <label for="bookId">Book ID:</label>
      <InputText id="bookId" class="form-control" @bind-Value="@_bookUpdate.BookId"/>
    </div>
    <div class="form-group">
      <label for="title">Title:</label>
      <InputText id="title" class="form-control" @bind-Value="@_bookUpdate.Title"/>
    </div>
    <div class="form-group">
      <label for="isbn">ISBN:</label>
      <InputText id="isbn" class="form-control" @bind-Value="@_bookUpdate.Isbn"/>
    </div>
    <div class="form-group">
      <label for="authors">Authors:</label>
      <p id="authors">TODO</p>
    </div>
    <div class="form-group">
      <label for="coverPage">Cover page:</label>
      <InputText id="coverPage" class="form-control" @bind-Value="@_bookUpdate.CoverPage"/>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
  </EditForm>
}

@code {
  private bool _errors;
  private string[] _errorList = [];
  private BookResponseDto? _book = new();
  private BookUpdateDto? _bookUpdate = new();

  [Parameter] public string Id { get; set; } = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    var response = await Http.GetAsync($"book/{WebUtility.UrlEncode(Id)}");
    if (response.IsSuccessStatusCode)
    {
      _book = await response.Content.ReadFromJsonAsync<BookResponseDto>();
      if (_book == null)
      {
        _errors = true;
        _errorList = ["Book not found"];
        return;
      }

      _bookUpdate = new BookUpdateDto
      {
        BookId = _book.BookId,
        Title = _book.Title,
        Isbn = _book.Isbn,
        Authors = _book.Authors,
        CoverPage = _book.CoverPage
      };
    }
    else
    {
      _errors = true;
      _errorList = [response.Content.ToString() ?? string.Empty];
    }
  }

  private async Task HandleValidSubmit()
  {
    if (_bookUpdate == null)
    {
      _errors = true;
      _errorList = ["Book not found"];
      return;
    }

    var bookUpdate = new BookUpdateDto
    {
      BookId = _bookUpdate.BookId,
      Title = _bookUpdate.Title,
      Isbn = _bookUpdate.Isbn,
      Authors = _bookUpdate.Authors,
      CoverPage = _bookUpdate.CoverPage ?? "EMPTY"
    };
    await Http.PostAsJsonAsync("book", bookUpdate);
    NavigationManager.NavigateTo("book");
  }

}
