@using Common.Dto
@using Client.Classes
@using Client.Services.Interfaces
@attribute [Route(ClientPath.AuthRegister)]
@inject HttpClient HttpClient
@inject IAuthenticationHttpClientService Service

<PageTitle>Register</PageTitle>

<h1>Register</h1>

@if (!_succeeded)
{
  <EditForm Model="@_userRegisterDto" OnValidSubmit="@HandleValidSubmit">
    <CustomValidation @ref="_customValidation"/>
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="mb-3">
      <InputText class="form-control" id="Email" @bind-Value="_userRegisterDto.Email" placeholder="Email"/>
    </div>

    <div class="mb-3">
      <InputText class="form-control" type="password" id="Password" @bind-Value="_userRegisterDto.Password" placeholder="Password"/>
    </div>

    <div class="mb-3">
      <InputText class="form-control" type="password" id="ConfirmPassword" @bind-Value="_userRegisterDto.ConfirmPassword" placeholder="Confirm password"/>
    </div>

    @if (!_registering)
    {
      <button class="btn btn-primary" type="submit">Submit</button>
    }
    else
    {
      <p>
        Registering...
      </p>
    }
  </EditForm>
}
else
{
  <p>
    Registration successful! <a href="login">Click here to login</a>.
  </p>
}

@code {
  private readonly UserRegisterDto _userRegisterDto = new();
  private CustomValidation? _customValidation;
  private bool _registering;
  private bool _succeeded;

  private async Task HandleValidSubmit()
  {
    _registering = true;

    _userRegisterDto.Username = _userRegisterDto.Email;
    var result = await Service.RegisterUser(HttpClient, _userRegisterDto);
    if (result.Succeeded) _succeeded = true;

    _customValidation?.ClearErrors();
    var errors = new Dictionary<string, List<string>> {{"", result.Errors.ToList()}};
    _customValidation?.DisplayErrors(errors);
    _registering = false;
  }

}
