@using Common.Dto
@using Client.Classes
@using Client.Services.Interfaces
@attribute [Route(ClientPath.AuthLogin)]
@inject IAuthenticationHttpClientService Service
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<EditForm Model="@_userLoginDto" OnValidSubmit="@HandleValidSubmit">
  <CustomValidation @ref="_customValidation"/>
  <DataAnnotationsValidator/>
  <ValidationSummary/>

  <div class="mb-3">
    <InputText class="form-control" type="email" id="Email" @bind-Value="_userLoginDto.Email" placeholder="Email"/>
  </div>

  <div class="mb-3">
    <InputText class="form-control" type="password" id="Password" @bind-Value="_userLoginDto.Password" placeholder="Password"/>
  </div>

  @if (!_loggingIn)
  {
    <button class="btn btn-primary" type="submit">Submit</button>
  }
  else
  {
    <p>
      Logging in...
    </p>
  }

</EditForm>

@code {
  private readonly UserLoginDto _userLoginDto = new();
  private CustomValidation? _customValidation;
  private bool _loggingIn;

  private async Task HandleValidSubmit()
  {
    _loggingIn = true;
    var result = await Service.LoginUser(HttpClient, _userLoginDto);
    if (result.Succeeded)
    {
      NavigationManager.NavigateTo(ClientPath.AuthDashboard);
    }
    else
    {
      _customValidation?.ClearErrors();
      var errors = new Dictionary<string, List<string>> {{"", new List<string> {result.Message}}};
      _customValidation?.DisplayErrors(errors);
    }

    _loggingIn = false;
  }

}
