@using Common.Models
@attribute [Route(ClientPath.FetchData)]
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (_forecasts == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <table class="table">
    <thead>
    <tr>
      <th>Date</th>
      <th>Temp. (C)</th>
      <th>Temp. (F)</th>
      <th>Summary</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var forecast in _forecasts)
    {
      <tr>
        <td>@forecast.Date.ToShortDateString()</td>
        <td>@forecast.TemperatureC</td>
        <td>@forecast.TemperatureF</td>
        <td>@forecast.Summary</td>
      </tr>
    }
    </tbody>
  </table>
}

@code {
  private WeatherForecast[]? _forecasts;

  protected override async Task OnInitializedAsync()
  {
    var host = NavigationManager.BaseUri;
    _forecasts = await HttpClient.GetFromJsonAsync<WeatherForecast[]>(host + "sample-data/weather.json");
  }

}
