@page "/login"
@using BlazorJwtAuth.Common.Dto
@using Blazor.JwtAuth.Client.Common.Classes
@using Blazor.JwtAuth.Client.Common.Library
@using BlazorJwtAuth.Client.Service.Services
@inject AuthenticationHttpClient Http
@inject NavigationManager NavigationManager
@inject AppSettings AppSettings
@inject ILogger<Login> Logger

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<EditForm Model="@_userLoginDto" OnValidSubmit="@HandleValidSubmit">
  @*<CustomValidation @ref="_customValidation" />*@
  <DataAnnotationsValidator/>
  <ValidationSummary/>

  <div class="mb-3">
    <InputText class="form-control" id="Email" @bind-Value="_userLoginDto.Email" placeholder="Email"/>
  </div>

  <div class="mb-3">
    <InputText class="form-control" id="Password" @bind-Value="_userLoginDto.Password" placeholder="Password"/>
  </div>

  @if (!_loggingIn)
  {
    <button class="btn btn-primary" type="submit">Submit</button>
  }
  else
  {
    <p>
      Logging in...
    </p>
  }

</EditForm>

@code {
  private readonly UserLoginDto _userLoginDto = new();
  private CustomValidation? _customValidation;
  private bool _loggingIn;

  private async Task HandleValidSubmit()
  {
    _loggingIn = true;

    var result = await Http.LoginUser(_userLoginDto, AppSettings);
    Logger.LogInformation("Login succeeded: {ResultSucceeded}", result.Succeeded);

    if (result.Succeeded)
    {
      NavigationManager.NavigateTo("dashboard");
    }
    else
    {
      _customValidation?.ClearErrors();
      var errors = new Dictionary<string, List<string>> {{"", new List<string> {result.Message}}};
      _customValidation?.DisplayErrors(errors);
    }

    _loggingIn = false;
  }

}
