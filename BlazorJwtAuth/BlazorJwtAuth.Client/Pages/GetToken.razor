@page "/gettoken"
@using BlazorJwtAuth.Common.Models
@inject HttpClient Http
@inject ILogger<GetToken> Logger

<PageTitle>Get Token</PageTitle>

<h1>Get Token</h1>

<h2>Account</h2>
<div class="row">
  <label for="userId" class="col-4">User Id</label>
  <input id="userId" class="col-8" @bind="_userId"/>
  <label for="email" class="col-4">Email</label>
  <input id="email" class="col-8" @bind="_email"/>
  <label for="password" class="col-4">Password</label>
  <input id="password" class="col-8" @bind="_password"/>
</div>

<div class="container mt-4">
  <div class="row justify-content-center">
    <div class="btn-group">
      <button class="btn btn-outline-primary" @onclick="GetTokenAsync">Get Token</button>
      <button class="btn btn-outline-primary">ボタン１</button>
      <button class="btn btn-outline-primary">ボタン２</button>
    </div>
  </div>
</div>

<h2>API Result</h2>
<div>
  <h3>Get Token Result</h3>
  <dl>
    <dt>token</dt>
    <dd>
      <input id="token" @bind="_token"/>
    </dd>
    <dt>message</dt>
    <dd>@_message</dd>
    <dt>is authenticated</dt>
    <dd>@_isAuthenticated</dd>
    <dt>user name</dt>
    <dd>@_userName</dd>
    <dt>refresh token expiration</dt>
    <dd>@_refreshTokenExpiration</dd>
  </dl>
</div>

@code {
  private string _userId = "userId";
  private string _email = "user@secureapi.com";
  private string _password = "Pa$$w0rd.";
  private string? _token;
  private string? _message;
  private bool? _isAuthenticated;
  private string? _userName;
  private DateTime? _refreshTokenExpiration;

  private async Task GetTokenAsync()
  {
    var tokenRequestModel = new TokenRequestModel
    {
      Email = _email,
      Password = _password
    };
    var response = await Http.PostAsJsonAsync("https://localhost:5500/api/User/token", tokenRequestModel);
    Logger.LogInformation("{L}", await response.Content.ReadAsStringAsync());

    var res = await response.Content.ReadFromJsonAsync<AuthenticationModel>();
    if (res != null)
    {
      Logger.LogInformation("IsAuthenticated: {L}", res.IsAuthenticated.ToString());
      if (res.IsAuthenticated)
      {
        _token = res.Token;
        _message = res.Message;
        _isAuthenticated = res.IsAuthenticated;
        _userName = res.UserName;
        _refreshTokenExpiration = res.RefreshTokenExpiration;
      }
      else
      {
        _token = "";
        _message = res.Message;
        _isAuthenticated = res.IsAuthenticated;
        _userName = "";
        _refreshTokenExpiration = null;
      }
    }
  }

}
