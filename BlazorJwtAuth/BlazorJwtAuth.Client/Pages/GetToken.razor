@page "/gettoken"
@using BlazorJwtAuth.Common.Models
@using System.Net.Http.Headers
@using System.Net
@using BlazorJwtAuth.Client.Library
@inject AppSettings AppSettings
@inject HttpClient Http
@inject ILogger<GetToken> Logger

<PageTitle>Get Token</PageTitle>

<h1>Get Token</h1>

<h2>Account</h2>
<div class="row">
  <label for="userId" class="col-4">User Id</label>
  <input id="userId" class="col-8" @bind="_userId"/>
  <label for="email" class="col-4">Email</label>
  <input id="email" class="col-8" @bind="_email"/>
  <label for="password" class="col-4">Password</label>
  <input id="password" class="col-8" @bind="_password"/>
</div>

<div class="container mt-4">
  <div class="row justify-content-center">
    <div class="btn-group">
      <button class="btn btn-outline-primary" @onclick="GetTokenAsync">Get Token</button>
      <button class="btn btn-outline-primary" @onclick="GetSecureDataAsync">Get Secure Data</button>
      <button class="btn btn-outline-primary" @onclick="PostRefreshTokenAsync">Refresh Token</button>
    </div>
  </div>
</div>

<h2>API Result</h2>
<div class="row">
  <div class="col-4">
    <h3>Get Token Result</h3>
    <dl>
      <dt>token</dt>
      <dd>
        <input id="token" @bind="_token"/>
      </dd>
      <dt>message</dt>
      <dd>@_message</dd>
      <dt>is authenticated</dt>
      <dd>@_isAuthenticated</dd>
      <dt>user name</dt>
      <dd>@_userName</dd>
      <dt>refresh token</dt>
      <dd>
        <input id="refreshToken" @bind="_refreshToken">
      </dd>
      <dt>refresh token expiration</dt>
      <dd>@_refreshTokenExpiration</dd>
    </dl>
  </div>
  <div class="col-4">
    <h3>Get Secure Data</h3>
    <dl>
      <dt>message</dt>
      <dd>@_getSecureDataMessage</dd>
    </dl>
  </div>
  <div class="col-4">
    <h3>Refresh Token</h3>
    <dl>
      <dt>message</dt>
      <dd>@_refreshTokenMessage</dd>
    </dl>
  </div>
</div>

@code {
  private string _userId = "userId";
  private string _email = "user@secureapi.com";
  private string _password = "Pa$$w0rd.";
  private string? _token;
  private string? _message;
  private bool? _isAuthenticated;
  private string? _userName;
  private string? _refreshToken;
  private DateTime? _refreshTokenExpiration;
  private string? _getSecureDataMessage;
  private string? _refreshTokenMessage;

  private async Task GetTokenAsync()
  {
    var tokenRequestModel = new GetTokenRequest
    {
      Email = _email,
      Password = _password
    };
    Logger.LogInformation("{E}",AppSettings.ApiRoot);
    var response = await Http.PostAsJsonAsync($"{AppSettings.ApiRoot}/User/token", tokenRequestModel);
    Logger.LogInformation("response: {R}", await response.Content.ReadAsStringAsync());

    var res = await response.Content.ReadFromJsonAsync<AuthenticationResponse>();
    if (res != null)
    {
      if (res.IsAuthenticated)
      {
        _token = res.Token;
        _message = res.Message;
        _isAuthenticated = res.IsAuthenticated;
        _userName = res.UserName;
        _refreshToken = res.RefreshToken;
        _refreshTokenExpiration = res.RefreshTokenExpiration.ToLocalTime();
      }
      else
      {
        _token = "";
        _message = res.Message;
        _isAuthenticated = res.IsAuthenticated;
        _userName = "";
        _refreshTokenExpiration = null;
      }
    }
  }

  private async Task GetSecureDataAsync()
  {
    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _token);
    var response = await Http.GetAsync($"{AppSettings.ApiRoot}/Secured");
    _getSecureDataMessage = response.StatusCode switch
    {
      HttpStatusCode.Unauthorized => "Unauthorized: Please check your token.",
      HttpStatusCode.OK => await response.Content.ReadAsStringAsync(),
      _ => "Oops! Something went wrong."
      };
  }

  private async Task PostRefreshTokenAsync()
  {
    if(string.IsNullOrEmpty(_refreshToken))
    {
      _refreshTokenMessage = "Please get a refresh token first.";
      return;
    }

    var refreshTokenRequest = new RefreshTokenRequest
    {
      RefreshToken = _refreshToken!
    };
    var response = await Http.PostAsJsonAsync($"{AppSettings.ApiRoot}/User/refresh-token", refreshTokenRequest);
    var res = await response.Content.ReadFromJsonAsync<AuthenticationResponse>();
    if (res != null)
    {
      if (res.IsAuthenticated)
      {
        _token = res.Token;
        _message = res.Message;
        _isAuthenticated = res.IsAuthenticated;
        _userName = res.UserName;
        _refreshToken = res.RefreshToken;
        _refreshTokenExpiration = res.RefreshTokenExpiration.ToLocalTime();
      }
      else
      {
        _token = "";
        _message = res.Message;
        _isAuthenticated = res.IsAuthenticated;
        _userName = "";
        _refreshTokenExpiration = null;
      }
    }
  }

}
