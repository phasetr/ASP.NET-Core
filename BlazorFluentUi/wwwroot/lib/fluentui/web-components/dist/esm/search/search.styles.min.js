/**
 * Minified by jsDelivr using Terser v5.15.1.
 * Original file: /npm/@fluentui/web-components@2.5.9/dist/esm/search/search.styles.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{css}from"@microsoft/fast-element";import{Button,DesignToken,display,forcedColorsStylesheetBehavior}from"@microsoft/fast-foundation";import{baseInputStyles,heightNumber,inputFilledStyles,inputForcedColorStyles,inputOutlineStyles,inputStateStyles}from"../styles";import{appearanceBehavior}from"../utilities/behaviors";import{controlCornerRadius,density,designUnit,neutralFillInputRecipe,neutralFillStealthRecipe,neutralForegroundRest}from"../design-tokens";import{typeRampBase}from"../styles/patterns/type-ramp";const logicalControlSelector=".root",clearButtonHover=DesignToken.create("clear-button-hover").withDefault((e=>{const t=neutralFillStealthRecipe.getValueFor(e),o=neutralFillInputRecipe.getValueFor(e);return t.evaluate(e,o.evaluate(e).focus).hover})),clearButtonActive=DesignToken.create("clear-button-active").withDefault((e=>{const t=neutralFillStealthRecipe.getValueFor(e),o=neutralFillInputRecipe.getValueFor(e);return t.evaluate(e,o.evaluate(e).focus).active}));export const searchStyles=(e,t)=>css`
    ${display("inline-block")}

    ${baseInputStyles(e,t,".root")}

    ${inputStateStyles(e,t,".root")}

    .root {
      display: flex;
      flex-direction: row;
    }
    .control {
      -webkit-appearance: none;
      color: inherit;
      background: transparent;
      border: 0;
      height: calc(100% - 4px);
      margin-top: auto;
      margin-bottom: auto;
      padding: 0 calc(${designUnit} * 2px + 1px);
      font-family: inherit;
      font-size: inherit;
      line-height: inherit;
    }
    .clear-button {
      display: inline-flex;
      align-items: center;
      margin: 1px;
      height: calc(100% - 2px);
      opacity: 0;
      background: transparent;
      color: ${neutralForegroundRest};
      fill: currentcolor;
      border: none;
      border-radius: calc(${controlCornerRadius} * 1px);
      min-width: calc(${heightNumber} * 1px);
      ${typeRampBase}
      outline: none;
      padding: 0 calc((10 + (${designUnit} * 2 * ${density})) * 1px);
    }
    .clear-button:hover {
      background: ${clearButtonHover};
    }
    .clear-button:active {
      background: ${clearButtonActive};
    }
    :host(:hover:not([disabled], [readOnly])) .clear-button,
    :host(:active:not([disabled], [readOnly])) .clear-button,
    :host(:focus-within:not([disabled], [readOnly])) .clear-button {
        opacity: 1;
    }
    :host(:hover:not([disabled], [readOnly])) .clear-button__hidden,
    :host(:active:not([disabled], [readOnly])) .clear-button__hidden,
    :host(:focus-within:not([disabled], [readOnly])) .clear-button__hidden {
        opacity: 0;
    }
    .control::-webkit-search-cancel-button {
      -webkit-appearance: none;
    }
    .input-wrapper {
      display: flex;
      position: relative;
      width: 100%;
    }
    .start,
    .end {
      display: flex;
      margin: 1px;
      align-items: center;
    }
    .start {
      display: flex;
      margin-inline-start: 11px;
    }
    ::slotted([slot="end"]) {
      height: 100%
    }
    .clear-button__hidden {
      opacity: 0;
    }
    .end {
        margin-inline-end: 11px;
    }
    ::slotted(${e.tagFor(Button)}) {
      margin-inline-end: 1px;
    }
  `.withBehaviors(appearanceBehavior("outline",inputOutlineStyles(e,t,".root")),appearanceBehavior("filled",inputFilledStyles(e,t,".root")),forcedColorsStylesheetBehavior(inputForcedColorStyles(e,t,".root")));
//# sourceMappingURL=/sm/991c9c4c42eae3fd3d51e7a4ea518af81dcb1426409ec8afbb415921f4c75958.map