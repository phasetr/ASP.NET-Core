/**
 * Minified by jsDelivr using Terser v5.15.1.
 * Original file: /npm/@fluentui/web-components@2.5.9/dist/esm/styles/patterns/input.styles.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{css}from"@microsoft/fast-element";import{DesignToken,disabledCursor}from"@microsoft/fast-foundation";import{SystemColors}from"@microsoft/fast-web-utilities";import{accentFillRest,controlCornerRadius,disabledOpacity,focusStrokeWidth,neutralFillInputFocus,neutralFillInputHover,neutralFillInputRecipe,neutralFillInputRest,neutralFillSecondaryFocus,neutralFillSecondaryHover,neutralFillSecondaryRecipe,neutralFillSecondaryRest,neutralForegroundHintRecipe,neutralForegroundRest,neutralStrokeInputHover,neutralStrokeInputRest,neutralStrokeRest,strokeWidth}from"../../design-tokens";import{typeRampBase}from"../patterns/type-ramp";import{heightNumber}from"../size";import{focusTreatmentBase}from"../focus";const placeholderRest=DesignToken.create("input-placeholder-rest").withDefault((e=>{const o=neutralFillInputRecipe.getValueFor(e);return neutralForegroundHintRecipe.getValueFor(e).evaluate(e,o.evaluate(e).rest)})),placeholderHover=DesignToken.create("input-placeholder-hover").withDefault((e=>{const o=neutralFillInputRecipe.getValueFor(e);return neutralForegroundHintRecipe.getValueFor(e).evaluate(e,o.evaluate(e).hover)})),filledPlaceholderRest=DesignToken.create("input-filled-placeholder-rest").withDefault((e=>{const o=neutralFillSecondaryRecipe.getValueFor(e);return neutralForegroundHintRecipe.getValueFor(e).evaluate(e,o.evaluate(e).rest)})),filledPlaceholderHover=DesignToken.create("input-filled-placeholder-hover").withDefault((e=>{const o=neutralFillSecondaryRecipe.getValueFor(e);return neutralForegroundHintRecipe.getValueFor(e).evaluate(e,o.evaluate(e).hover)}));export const baseInputStyles=(e,o,t)=>css`
  :host {
    ${typeRampBase}
    color: ${neutralForegroundRest};
    fill: currentcolor;
    user-select: none;
    position: relative;
  }

  ${t} {
    box-sizing: border-box;
    position: relative;
    color: inherit;
    border: calc(${strokeWidth} * 1px) solid transparent;
    border-radius: calc(${controlCornerRadius} * 1px);
    height: calc(${heightNumber} * 1px);
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
  }

  .control {
    width: 100%;
    outline: none;
  }

  .label {
    display: block;
    color: ${neutralForegroundRest};
    cursor: pointer;
    ${typeRampBase}
    margin-bottom: 4px;
  }

  .label__hidden {
    display: none;
    visibility: hidden;
  }

  :host([disabled]) ${t},
  :host([readonly]) ${t},
  :host([disabled]) .label,
  :host([readonly]) .label,
  :host([disabled]) .control,
  :host([readonly]) .control {
    cursor: ${disabledCursor};
  }

  :host([disabled]) {
    opacity: ${disabledOpacity};
  }
`;export const inputStateStyles=(e,o,t)=>css`
  @media (forced-colors: none) {
    :host(:not([disabled]):active)::after {
      left: 50%;
      width: 40%;
      transform: translateX(-50%);
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }

    :host(:not([disabled]):focus-within)::after {
      left: 0;
      width: 100%;
      transform: none;
    }

    :host(:not([disabled]):active)::after,
    :host(:not([disabled]):focus-within:not(:active))::after {
      content: '';
      position: absolute;
      height: calc(${focusStrokeWidth} * 1px);
      bottom: 0;
      border-bottom: calc(${focusStrokeWidth} * 1px) solid ${accentFillRest};
      border-bottom-left-radius: calc(${controlCornerRadius} * 1px);
      border-bottom-right-radius: calc(${controlCornerRadius} * 1px);
      z-index: 2;
      transition: all 300ms cubic-bezier(0.1, 0.9, 0.2, 1);
    }
  }
`;export const inputOutlineStyles=(e,o,t,r=":not([disabled]):not(:focus-within)")=>css`
  ${t} {
    background: padding-box linear-gradient(${neutralFillInputRest}, ${neutralFillInputRest}),
      border-box ${neutralStrokeInputRest};
  }

  :host(${r}:hover) ${t} {
    background: padding-box linear-gradient(${neutralFillInputHover}, ${neutralFillInputHover}),
      border-box ${neutralStrokeInputHover};
  }

  :host(:not([disabled]):focus-within) ${t} {
    background: padding-box linear-gradient(${neutralFillInputFocus}, ${neutralFillInputFocus}),
      border-box ${neutralStrokeInputRest};
  }
  
  :host([disabled]) ${t} {
    background: padding-box linear-gradient(${neutralFillInputRest}, ${neutralFillInputRest}),
      border-box ${neutralStrokeRest};
  }

  .control::placeholder {
    color: ${placeholderRest};
  }

  :host(${r}:hover) .control::placeholder {
    color: ${placeholderHover};
  }
`;export const inputFilledStyles=(e,o,t,r=":not([disabled]):not(:focus-within)")=>css`
  ${t} {
    background: ${neutralFillSecondaryRest};
  }

  :host(${r}:hover) ${t} {
    background: ${neutralFillSecondaryHover};
  }

  :host(:not([disabled]):focus-within) ${t} {
    background: ${neutralFillSecondaryFocus};
  }

  :host([disabled]) ${t} {
    background: ${neutralFillSecondaryRest};
  }

  .control::placeholder {
    color: ${filledPlaceholderRest};
  }

  :host(${r}:hover) .control::placeholder {
    color: ${filledPlaceholderHover};
  }
`;export const inputForcedColorStyles=(e,o,t,r=":not([disabled]):not(:focus-within)")=>css`
  :host {
    color: ${SystemColors.ButtonText};
  }

  ${t} {
    background: ${SystemColors.ButtonFace};
    border-color: ${SystemColors.ButtonText};
  }

  :host(${r}:hover) ${t},
  :host(:not([disabled]):focus-within) ${t} {
    border-color: ${SystemColors.Highlight};
  }

  :host([disabled]) ${t} {
    opacity: 1;
    background: ${SystemColors.ButtonFace};
    border-color: ${SystemColors.GrayText};
  }

  .control::placeholder,
  :host(${r}:hover) .control::placeholder {
    color: ${SystemColors.CanvasText};
  }

  :host(:not([disabled]):focus) ${t} {
    ${focusTreatmentBase}
    outline-color: ${SystemColors.Highlight};
  }

  :host([disabled]) {
    opacity: 1;
    color: ${SystemColors.GrayText};
  }

  :host([disabled]) ::placeholder,
  :host([disabled]) ::-webkit-input-placeholder {
    color: ${SystemColors.GrayText};
  }
`;
//# sourceMappingURL=/sm/76767ab93ce1b9a207752d11ac6fa1451a729023d7ff9e3dbd5674bf84711b8e.map