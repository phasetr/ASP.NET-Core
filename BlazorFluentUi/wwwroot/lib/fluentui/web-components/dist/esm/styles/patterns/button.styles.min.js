/**
 * Minified by jsDelivr using Terser v5.15.1.
 * Original file: /npm/@fluentui/web-components@2.5.9/dist/esm/styles/patterns/button.styles.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{css}from"@microsoft/fast-element";import{SystemColors}from"@microsoft/fast-web-utilities";import{display,focusVisible,forcedColorsStylesheetBehavior}from"@microsoft/fast-foundation";import{heightNumber}from"../size";import{accentFillActive,accentFillHover,accentFillRest,accentForegroundActive,accentForegroundHover,accentForegroundRest,accentStrokeControlActive,accentStrokeControlHover,accentStrokeControlRest,controlCornerRadius,density,designUnit,focusStrokeInner,focusStrokeWidth,foregroundOnAccentActive,foregroundOnAccentHover,foregroundOnAccentRest,neutralFillActive,neutralFillHover,neutralFillRest,neutralFillStealthActive,neutralFillStealthHover,neutralFillStealthRest,neutralForegroundRest,neutralStrokeActive,neutralStrokeControlActive,neutralStrokeControlHover,neutralStrokeControlRest,neutralStrokeHover,neutralStrokeRest,strokeWidth}from"../../design-tokens";import{typeRampBase}from"../../styles/patterns/type-ramp";import{focusTreatmentBase,focusTreatmentTight}from"../focus";export const baseButtonStyles=(o,t,r,e="[disabled]")=>css`
    ${display("inline-flex")}
    
    :host {
      position: relative;
      box-sizing: border-box;
      ${typeRampBase}
      height: calc(${heightNumber} * 1px);
      min-width: calc(${heightNumber} * 1px);
      color: ${neutralForegroundRest};
      border-radius: calc(${controlCornerRadius} * 1px);
      fill: currentcolor;
    }

    .control {
      border: calc(${strokeWidth} * 1px) solid transparent;
      flex-grow: 1;
      box-sizing: border-box;
      display: inline-flex;
      justify-content: center;
      align-items: center;
      padding: 0 calc((10 + (${designUnit} * 2 * ${density})) * 1px);
      white-space: nowrap;
      outline: none;
      text-decoration: none;
      color: inherit;
      border-radius: inherit;
      fill: inherit;
      font-family: inherit;
    }

    .control,
    .end,
    .start {
      font: inherit;
    }

    .control.icon-only {
      padding: 0;
      line-height: 0;
    }

    .control:${focusVisible} {
      ${focusTreatmentBase}
    }

    .control::-moz-focus-inner {
      border: 0;
    }

    .content {
      pointer-events: none;
    }

    .start,
    .end {
      display: flex;
      pointer-events: none;
    }

    .start {
      margin-inline-end: 11px;
    }

    .end {
      margin-inline-start: 11px;
    }
  `;export const NeutralButtonStyles=(o,t,r,e="[disabled]")=>css`
    .control {
      background: padding-box linear-gradient(${neutralFillRest}, ${neutralFillRest}),
        border-box ${neutralStrokeControlRest};
    }

    :host(${r}:hover) .control {
      background: padding-box linear-gradient(${neutralFillHover}, ${neutralFillHover}),
        border-box ${neutralStrokeControlHover};
    }

    :host(${r}:active) .control {
      background: padding-box linear-gradient(${neutralFillActive}, ${neutralFillActive}),
        border-box ${neutralStrokeControlActive};
    }

    :host(${e}) .control {
      background: padding-box linear-gradient(${neutralFillRest}, ${neutralFillRest}),
        border-box ${neutralStrokeRest};
    }
  `.withBehaviors(forcedColorsStylesheetBehavior(css`
        .control {
          background: ${SystemColors.ButtonFace};
          border-color: ${SystemColors.ButtonText};
          color: ${SystemColors.ButtonText};
        }

        :host(${r}:hover) .control,
        :host(${r}:active) .control {
          forced-color-adjust: none;
          background: ${SystemColors.HighlightText};
          border-color: ${SystemColors.Highlight};
          color: ${SystemColors.Highlight};
        }

        :host(${e}) .control {
          background: transparent;
          border-color: ${SystemColors.GrayText};
          color: ${SystemColors.GrayText};
        }

        .control:${focusVisible} {
          outline-color: ${SystemColors.CanvasText};
        }

        :host([href]) .control {
          background: transparent;
          border-color: ${SystemColors.LinkText};
          color: ${SystemColors.LinkText};
        }

        :host([href]:hover) .control,
        :host([href]:active) .control {
          background: transparent;
          border-color: ${SystemColors.CanvasText};
          color: ${SystemColors.CanvasText};
        }
    `));export const AccentButtonStyles=(o,t,r,e="[disabled]")=>css`
    .control {
      background: padding-box linear-gradient(${accentFillRest}, ${accentFillRest}),
        border-box ${accentStrokeControlRest};
      color: ${foregroundOnAccentRest};
    }

    :host(${r}:hover) .control {
      background: padding-box linear-gradient(${accentFillHover}, ${accentFillHover}),
        border-box ${accentStrokeControlHover};
      color: ${foregroundOnAccentHover};
    }

    :host(${r}:active) .control {
      background: padding-box linear-gradient(${accentFillActive}, ${accentFillActive}),
        border-box ${accentStrokeControlActive};
      color: ${foregroundOnAccentActive};
    }

    :host(${e}) .control {
      background: ${accentFillRest};
    }

    .control:${focusVisible} {
      box-shadow: 0 0 0 calc(${focusStrokeWidth} * 1px) ${focusStrokeInner} inset !important;
    }
  `.withBehaviors(forcedColorsStylesheetBehavior(css`
        .control {
          forced-color-adjust: none;
          background: ${SystemColors.Highlight};
          color: ${SystemColors.HighlightText};
        }

        :host(${r}:hover) .control,
        :host(${r}:active) .control {
          background: ${SystemColors.HighlightText};
          border-color: ${SystemColors.Highlight};
          color: ${SystemColors.Highlight};
        }

        :host(${e}) .control {
          background: transparent;
          border-color: ${SystemColors.GrayText};
          color: ${SystemColors.GrayText};
        }

        .control:${focusVisible} {
          outline-color: ${SystemColors.CanvasText};
          box-shadow: 0 0 0 calc(${focusStrokeWidth} * 1px) ${SystemColors.HighlightText} inset !important;
        }

        :host([href]) .control {
          background: ${SystemColors.LinkText};
          color: ${SystemColors.HighlightText};
        }

        :host([href]:hover) .control,
        :host([href]:active) .control {
          background: ${SystemColors.ButtonFace};
          border-color: ${SystemColors.LinkText};
          color: ${SystemColors.LinkText};
        }
      `));export const HypertextStyles=(o,t,r,e="[disabled]")=>css`
    :host {
      height: auto;
      font-family: inherit;
      font-size: inherit;
      line-height: inherit;
      min-width: 0;
    }

    .control {
      display: inline;
      padding: 0;
      border: none;
      box-shadow: none;
      line-height: 1;
    }

    :host(${r}) .control {
      color: ${accentForegroundRest};
      text-decoration: underline 1px;
    }

    :host(${r}:hover) .control {
      color: ${accentForegroundHover};
      text-decoration: none;
    }

    :host(${r}:active) .control {
      color: ${accentForegroundActive};
      text-decoration: none;
    }

    .control:${focusVisible} {
      ${focusTreatmentTight}
    }
  `.withBehaviors(forcedColorsStylesheetBehavior(css`
        :host(${r}) .control {
          color: ${SystemColors.LinkText};
        }

        :host(${r}:hover) .control,
        :host(${r}:active) .control {
          color: ${SystemColors.CanvasText};
        }

        .control:${focusVisible} {
          outline-color: ${SystemColors.CanvasText};
        }
      `));export const LightweightButtonStyles=(o,t,r,e="[disabled]")=>css`
    :host {
      color: ${accentForegroundRest};
    }

    .control {
      background: ${neutralFillStealthRest};
    }

    :host(${r}:hover) .control {
      background: ${neutralFillStealthHover};
      color: ${accentForegroundHover};
    }

    :host(${r}:active) .control {
      background: ${neutralFillStealthActive};
      color: ${accentForegroundActive};
    }

    :host(${e}) .control {
      background: ${neutralFillStealthRest};
    }
  `.withBehaviors(forcedColorsStylesheetBehavior(css`
        :host {
          color: ${SystemColors.ButtonText};
        }

        .control {
          forced-color-adjust: none;
          background: transparent;
        }

        :host(${r}:hover) .control,
        :host(${r}:active) .control {
          background: transparent;
          border-color: ${SystemColors.ButtonText};
          color: ${SystemColors.ButtonText};
        }

        :host(${e}) .control {
          background: transparent;
          color: ${SystemColors.GrayText};
        }

        .control:${focusVisible} {
          outline-color: ${SystemColors.CanvasText};
        }

        :host([href]) .control {
          color: ${SystemColors.LinkText};
        }

        :host([href]:hover) .control,
        :host([href]:active) .control {
          border-color: ${SystemColors.LinkText};
          color: ${SystemColors.LinkText};
        }
      `));export const OutlineButtonStyles=(o,t,r,e="[disabled]")=>css`
    .control {
      background: transparent !important;
      border-color: ${neutralStrokeRest};
    }

    :host(${r}:hover) .control {
      border-color: ${neutralStrokeHover};
    }

    :host(${r}:active) .control {
      border-color: ${neutralStrokeActive};
    }

    :host(${e}) .control {
      background: transparent !important;
      border-color: ${neutralStrokeRest};
    }
  `.withBehaviors(forcedColorsStylesheetBehavior(css`
        .control {
          border-color: ${SystemColors.ButtonText};
          color: ${SystemColors.ButtonText};
        }

        :host(${r}:hover) .control,
        :host(${r}:active) .control {
          background: ${SystemColors.HighlightText};
          border-color: ${SystemColors.Highlight};
          color: ${SystemColors.Highlight};
        }

        :host(${e}) .control {
          border-color: ${SystemColors.GrayText};
          color: ${SystemColors.GrayText};
        }

        .control:${focusVisible} {
          outline-color: ${SystemColors.CanvasText};
        }

        :host([href]) .control {
          border-color: ${SystemColors.LinkText};
          color: ${SystemColors.LinkText};
        }

        :host([href]:hover) .control,
        :host([href]:active) .control {
          border-color: ${SystemColors.CanvasText};
          color: ${SystemColors.CanvasText};
        }
      `));export const StealthButtonStyles=(o,t,r,e="[disabled]")=>css`
    .control {
      background: ${neutralFillStealthRest};
    }

    :host(${r}:hover) .control {
      background: ${neutralFillStealthHover};
    }

    :host(${r}:active) .control {
      background: ${neutralFillStealthActive};
    }

    :host(${e}) .control {
      background: ${neutralFillStealthRest};
    }
  `.withBehaviors(forcedColorsStylesheetBehavior(css`
        .control {
          forced-color-adjust: none;
          background: transparent;
          color: ${SystemColors.ButtonText};
        }

        :host(${r}:hover) .control,
        :host(${r}:active) .control {
          background: transparent;
          border-color: ${SystemColors.ButtonText};
          color: ${SystemColors.ButtonText};
        }

        :host(${e}) .control {
          background: transparent;
          color: ${SystemColors.GrayText};
        }
        
        .control:${focusVisible} {
          outline-color: ${SystemColors.CanvasText};
        }

        :host([href]) .control {
          color: ${SystemColors.LinkText};
        }

        :host([href]:hover) .control,
        :host([href]:active) .control {
          background: transparent;
          border-color: ${SystemColors.LinkText};
          color: ${SystemColors.LinkText};
        }
      `));
//# sourceMappingURL=/sm/7f80fc750dd81f337899ed86115a16563b74ddf83973d1db4a77719e4ae226d6.map