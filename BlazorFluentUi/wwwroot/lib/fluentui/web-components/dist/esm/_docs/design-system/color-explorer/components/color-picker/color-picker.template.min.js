/**
 * Minified by jsDelivr using Terser v5.15.1.
 * Original file: /npm/@fluentui/web-components@2.5.9/dist/esm/_docs/design-system/color-explorer/components/color-picker/color-picker.template.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{html,ref}from"@microsoft/fast-element";import{TextField}from"@microsoft/fast-foundation";export const colorPickerTemplate=e=>html`
        <template
            @focus="${e=>e.handleFocus()}"
            @blur="${e=>e.handleBlur()}"
            @mousemove="${(e,t)=>e.mouseActive?e.handleMouseMove(t.event):null}"
            @mouseup="${(e,t)=>e.mouseActive?e.handleMouseUp(t.event):null}"
            style="--selected-color-value: ${e=>e.value?e.value:"transparent"}"
        >
            <div class="root" part="root">
                <${e.tagFor(TextField)}
                    class="root-control"
                    part="control"
                    id="control"
                    @input="${e=>e.handleTextInput()}"
                    @change="${e=>e.handleChange()}"
                    ?autofocus="${e=>e.autofocus}"
                    ?disabled="${e=>e.disabled}"
                    placeholder="${e=>e.placeholder}"
                    ?readonly="${e=>e.readOnly}"
                    ?required="${e=>e.required}"
                    :value="${e=>e.value}"
                    ${ref("control")}
                >
                    <div slot="start" class="control-color"></div>
                </${e.tagFor(TextField)}>
                <div class="${e=>e.open?"popup__open":"popup"}">
                    <div class="pickers">
                        <div
                            class="pickers-saturation"
                            style="background-color:${e=>e.uiValues.HueCSSColor}"
                            @mousedown="${(e,t)=>e.handleMouseDown("sv",t.event)}"
                        >
                            <div
                                class="saturation-indicator"
                                style="left: ${e=>e.uiValues.SatValLeftPos-2}%; top: ${e=>e.uiValues.SatValTopPos-2}%"
                            ></div>
                        </div>
                        <div
                            class="pickers-hue"
                            @mousedown="${(e,t)=>e.handleMouseDown("h",t.event)}"
                        >
                            <div
                                class="hue-indicator"
                                style="left: ${e=>e.uiValues.HuePosition-1}%"
                            ></div>
                        </div>
                        <div
                            class="pickers-alpha"
                            @mousedown="${(e,t)=>e.handleMouseDown("a",t.event)}"
                        >
                            <div
                                class="alpha-mask"
                                style="background-image: linear-gradient(to right, transparent, ${e=>e.uiValues.HueCSSColor})"
                            ></div>
                            <div
                                class="alpha-indicator"
                                style="left: ${e=>e.uiValues.AlphaPos-1}%"
                            ></div>
                        </div>
                    </div>
                    <div class="inputs">
                        <${e.tagFor(TextField)}
                            maxlength="3"
                            size="3"
                            @input="${(e,t)=>e.handleTextValueInput("r",t.event)}"
                            :value="${e=>Math.round(255*e.uiValues.RGBColor.r)}"
                        >
                            <span slot="start">R:</span>
                        </${e.tagFor(TextField)}>
                        <${e.tagFor(TextField)}
                            maxlength="3"
                            size="3"
                            @input="${(e,t)=>e.handleTextValueInput("g",t.event)}"
                            :value="${e=>Math.round(255*e.uiValues.RGBColor.g)}"
                        >
                            <span slot="start">G:</span>
                        </${e.tagFor(TextField)}>
                        <${e.tagFor(TextField)}
                            maxlength="3"
                            size="3"
                            @input="${(e,t)=>e.handleTextValueInput("b",t.event)}"
                            :value="${e=>Math.round(255*e.uiValues.RGBColor.b)}"
                        >
                            <span slot="start">B:</span>
                        </${e.tagFor(TextField)}>
                        <${e.tagFor(TextField)}
                            maxlength="3"
                            size="3"
                            @input="${(e,t)=>e.handleTextValueInput("h",t.event)}"
                            :value="${e=>Math.round(e.uiValues.HSVColor.h)}"
                        >
                            <span slot="start">H:</span>
                        </${e.tagFor(TextField)}>
                        <${e.tagFor(TextField)}
                            maxlength="3"
                            size="3"
                            @input="${(e,t)=>e.handleTextValueInput("s",t.event)}"
                            :value="${e=>Math.round(100*e.uiValues.HSVColor.s)}"
                        >
                            <span slot="start">S:</span>
                        </${e.tagFor(TextField)}>
                        <${e.tagFor(TextField)}
                            maxlength="3"
                            size="3"
                            @input="${(e,t)=>e.handleTextValueInput("v",t.event)}"
                            :value="${e=>Math.round(100*e.uiValues.HSVColor.v)}"
                        >
                            <span slot="start">V:</span>
                        </${e.tagFor(TextField)}>
                        <${e.tagFor(TextField)}
                            maxlength="3"
                            size="3"
                            @input="${(e,t)=>e.handleTextValueInput("a",t.event)}"
                            :value="${e=>Math.round(100*e.uiValues.RGBColor.a)}"
                        >
                            <span slot="start">A:</span>
                        </${e.tagFor(TextField)}>
                    </div>
                </div>
            </div>
        </template>
    `;
//# sourceMappingURL=/sm/43496f2ed3205f6edddb956759a0684c61e1f0c950c8239b6d2fe911081d2db2.map