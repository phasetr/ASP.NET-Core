/**
 * Minified by jsDelivr using Terser v5.15.1.
 * Original file: /npm/@fluentui/web-components@2.5.9/dist/esm/_docs/design-system/color-explorer/app.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{__decorate}from"tslib";import{parseColorHexRGB}from"@microsoft/fast-colors";import{attr,css,customElement,FASTElement,html,observable,ref,repeat,when}from"@microsoft/fast-element";import{accentBaseColor,baseLayerLuminance,neutralBaseColor,neutralLayer1Recipe,neutralLayer2Recipe,neutralLayer3Recipe,neutralLayer4Recipe,neutralLayerCardContainerRecipe,neutralLayerFloatingRecipe,PaletteRGB,StandardLuminance,SwatchRGB}from"../../../index-rollup";import{ComponentTypes}from"./component-types";import{AppColorBlock}from"./components/color-block";import{AppControlPane}from"./components/control-pane";import{AppGradient}from"./components/gradient";import{AppSampleApp}from"./components/sample-app";const sampleTemplate=html`
  <fluent-design-system-provider
    neutral-color="${e=>e.neutralColor}"
    accent-color="${e=>e.accentColor}"
    style="display: flex; align-items: stretch; align-content: stretch; justify-content: center; flex-grow: 1;"
  >
    <app-layer-background
      id="light-mode"
      base-layer-luminance="${StandardLuminance.LightMode}"
      background-layer-recipe="L4"
      style="flex-grow: 1; padding: 100px;"
    >
      <app-sample-app></app-sample-app>
    </app-layer-background>
    <app-layer-background
      id="dark-mode"
      base-layer-luminance="${StandardLuminance.DarkMode}"
      background-layer-recipe="L4"
      style="flex-grow: 1; padding: 100px;"
    >
      <app-sample-app></app-sample-app>
    </app-layer-background>
  </fluent-design-system-provider>
`,colorBlockTemplate=html`
  ${repeat((e=>e.backgrounds()),html`
      <app-color-block
        id="${e=>e.color.toUpperCase().replace("#","")}"
        index="${(e,t)=>e.index}"
        component="${(e,t)=>t.parent.componentType}"
        color="${e=>e.color}"
        layer-name="${e=>e.title}"
      ></app-color-block>
    `)}
`,template=html`
  <div class="container fill">
    <div class="row fill">
      <div class="canvas" ${ref("canvasElement")}>
        <div class="container fill">
          <div class="row gradient">
            <app-gradient :colors="${e=>e.neutralPalette}" :markedColor="${e=>e.neutralColor}"></app-gradient>
          </div>
          <div class="row gradient">
            <app-gradient :colors="${e=>e.accentPalette}" :markedColor="${e=>e.accentColor}"></app-gradient>
          </div>
          <div class="row fill">
            <div style="display: flex; overflow: auto;">
              ${when((e=>e.componentType===ComponentTypes.sample),sampleTemplate)}
              ${when((e=>e.componentType!==ComponentTypes.sample),colorBlockTemplate)}
            </div>
          </div>
        </div>
      </div>
      <div>
        <app-layer-background
          id="control-pane"
          class="control-pane-container"
          base-layer-luminance="${StandardLuminance.DarkMode}"
          background-layer-recipe="L2"
        >
          <app-control-pane
            :componentType="${e=>e.componentType}"
            :neutralColor="${e=>e.neutralColor}"
            :accentColor="${e=>e.accentColor}"
            :showOnlyLayerBackgrounds="${e=>e.showOnlyLayerBackgrounds}"
            @formvaluechange="${(e,t)=>e.controlPaneHandler(t.event)}"
          ></app-control-pane>
        </app-layer-background>
      </div>
    </div>
  </div>
`,styles=css`
  :host {
  }

  .container {
    display: flex;
    flex-direction: column;
  }

  .container.fill {
    width: 100%;
    height: 1200px;
  }

  .row {
    position: relative;
    display: flex;
    flex-direction: row;
    flex-basis: auto;
  }

  .row.fill {
    flex: 1;
    overflow: hidden;
  }

  .canvas {
    min-width: 300px;
    flex-grow: 1;
  }

  .gradient {
    height: 20px;
  }

  .control-pane-container {
    height: 100%;
    z-index: 1;
    padding: 40px;
    position: relative;
    overflow: auto;
    width: 310px;
    box-sizing: border-box;
  }

  app-color-block {
    min-width: 400px;
  }
`;let App=class extends FASTElement{constructor(){super(...arguments),this.componentType=ComponentTypes.backplate,this.neutralPalette=[],this.accentPalette=[],this.showOnlyLayerBackgrounds=!0,this.layerRecipes=[[neutralLayerFloatingRecipe,"neutralLayerFloating"],[neutralLayerCardContainerRecipe,"neutralLayerCardContainer"],[neutralLayer1Recipe,"neutralLayer1"],[neutralLayer2Recipe,"neutralLayer2"],[neutralLayer3Recipe,"neutralLayer3"],[neutralLayer4Recipe,"neutralLayer4"]],this.resolveLayerRecipes=e=>{const t=document.createElement("div");return this.canvasElement.appendChild(t),baseLayerLuminance.setValueFor(t,e),this.layerRecipes.map((e=>{const a=e[0].getValueFor(document.body).evaluate(t).toColorString();return{index:this.neutralPalette.indexOf(a),color:a,title:e[1]}})).reduce(((e,t)=>{const a=e.findIndex((e=>e.color===t.color));return-1===a?e.concat(t):e.map(((e,o)=>o===a?{index:this.neutralPalette.indexOf(t.color),color:t.color,title:t.title.concat(", ",e.title)}:e))}),[]).sort(((e,t)=>e.index-t.index))}}neutralColorChanged(e,t){if(this.canvasElement&&t){const e=SwatchRGB.from(parseColorHexRGB(t));neutralBaseColor.setValueFor(this.canvasElement,e),this.neutralPalette=PaletteRGB.from(e).swatches.map((e=>e.toColorString()))}}accentColorChanged(e,t){if(this.canvasElement&&t){const e=SwatchRGB.from(parseColorHexRGB(t));accentBaseColor.setValueFor(this.canvasElement,e),this.accentPalette=PaletteRGB.from(e).swatches.map((e=>e.toColorString()))}}connectedCallback(){super.connectedCallback(),this.neutralColorChanged(void 0,this.neutralColor),this.accentColorChanged(void 0,this.accentColor)}backgrounds(){const e=this.lightModeLayers.concat(this.darkModeLayers);return this.showOnlyLayerBackgrounds?e:this.neutralPalette.map(((t,a)=>{const o=e.findIndex((e=>e.color===t));return{index:a,color:t,title:-1!==o?e[o].title:void 0}}))}get lightModeLayers(){return this.resolveLayerRecipes(StandardLuminance.LightMode)}get darkModeLayers(){return this.resolveLayerRecipes(StandardLuminance.DarkMode)}controlPaneHandler(e){const t=e.detail;this[t.field]=t.value}};__decorate([attr({attribute:"component-type"})],App.prototype,"componentType",void 0),__decorate([attr({attribute:"neutral-color"})],App.prototype,"neutralColor",void 0),__decorate([observable],App.prototype,"neutralPalette",void 0),__decorate([attr({attribute:"accent-color"})],App.prototype,"accentColor",void 0),__decorate([observable],App.prototype,"accentPalette",void 0),__decorate([observable],App.prototype,"showOnlyLayerBackgrounds",void 0),App=__decorate([customElement({name:"app-main",template:template,styles:styles})],App);export{App};
//# sourceMappingURL=/sm/e7388f7c4283fb58c4c5640e2a24306d18c31df0e8612312941ba6d39b9f435b.map