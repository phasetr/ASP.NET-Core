@page "/register"
@using BlazorWasmAuth.Identity
@inject IAccountManagement Acct

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<AuthorizeView>
  <Authorized>
    <div class="alert alert-success">You're already logged in as @context.User.Identity?.Name.</div>
  </Authorized>
  <NotAuthorized>
    @if (_success)
    {
      <div class="alert alert-success">You successfully registered. Now you can <a href="login">login</a>.</div>
    }
    else
    {
      if (_errors)
      {
        foreach (var error in _errorList)
        {
          <div class="alert alert-danger">@error</div>
        }
      }

      <div class="flex-outer">
        <div>
          <label for="email">
            Email:
          </label>
          <input autofocus autocomplete="on" required id="email" name="emailInput" placeholder="Enter your email address" type="email" @bind-value="_email"/>
        </div>
        <div>
          <label for="password">
            Password:
          </label>
          <input required id="password" name="passwordInput" placeholder="Enter your password" type="password" @bind-value="_password"/><br/>
        </div>
        <div>
          <label for="confirmPassword">
            Retype password:
          </label>
          <input required id="confirmPassword" name="confirmPasswordInput" placeholder="Re-enter your password" type="password" @bind-value="_confirmPassword"/>
        </div>
        <div>
          <button class="btn btn-primary" @onclick="DoRegisterAsync">Register</button>
        </div>
      </div>
    }
  </NotAuthorized>
</AuthorizeView>

@code {
  private bool _success, _errors;
  private string _email = string.Empty;
  private string _password = string.Empty;
  private string _confirmPassword = string.Empty;
  private string[] _errorList = [];

  private async Task DoRegisterAsync()
  {
    _success = _errors = false;
    _errorList = [];

    if (string.IsNullOrWhiteSpace(_email))
    {
      _errors = true;
      _errorList = ["Email is required."];
      return;
    }

    if (string.IsNullOrWhiteSpace(_password))
    {
      _errors = true;
      _errorList = ["Password is required."];
      return;
    }

    if (string.IsNullOrWhiteSpace(_confirmPassword))
    {
      _errors = true;
      _errorList = ["Please confirm your password."];
      return;
    }

    if (_password != _confirmPassword)
    {
      _errors = true;
      _errorList = ["Passwords don't match."];
      return;
    }

    var result = await Acct.RegisterAsync(_email, _password);

    if (result.Succeeded)
    {
      _success = true;
      _email = _password = _confirmPassword = string.Empty;
    }
    else
    {
      _errors = true;
      _errorList = result.ErrorList;
    }
  }

}
